##
# Adds internal locations for storing and getting full page cache from redis
##

srcache_default_expire '${NGINX_REDIS_CACHE_TTL_DEFAULT}';
srcache_max_expire '${NGINX_REDIS_CACHE_TTL_MAX}';

##
# Adds internal locations for storing and getting full page cache from redis
##
location = /redis-fetch {
    internal;
    content_by_lua_block {
      local key = assert(ngx.var.arg_key, "no key found")

      local redis = require "resty.redis"
      local red, err = redis:new()

      if not red then
        ngx.log(ngx.STDERR, "Failed to create redis variable, error -> ", err)
		    return ngx.exit(ngx.HTTP_NOT_FOUND)
      end

      red:set_timeout(500)

      assert(red:connect("${REDIS_READHOST}", ${REDIS_PORT}))
      if not red then
        ngx.log(ngx.STDERR, "Failed to connect to redis, error -> ", err)
		    return ngx.exit(ngx.HTTP_NOT_FOUND)
      end
	  
      if string.len("${REDIS_PASSWORD}") > 0 then
        local res, err = red:auth("${REDIS_PASSWORD}")
        if not res then
          ngx.say("failed to authenticate, ", err)
          ngx.exit(ngx.HTTP_NOT_FOUND)
        end
      end

      assert(red:select(${REDIS_DATABASE}))
      if not red then
        ngx.log(ngx.STDERR, "Failed to select database, error -> ", err)
		    return ngx.exit(ngx.HTTP_NOT_FOUND)
      end

      local data = assert(red:get(key))
      assert(red:set_keepalive(10000, 100))
      if data == ngx.null then
        return ngx.exit(ngx.HTTP_NOT_FOUND)
      end
      ngx.print(data)
    }
}

location /redis-store {
    internal;

    content_by_lua_block {
      local key = assert(ngx.var.arg_key, "no key found")
      local value = assert(ngx.var.request_body, "no value found")

      local redis = require "resty.redis"
      local red, err = redis:new()

      if not red then
        ngx.log(ngx.STDERR, "Failed to create redis variable, error -> ", err)
		    return ngx.exit(ngx.HTTP_NOT_FOUND)
      end
      
      red:set_timeout(500)

      assert(red:connect("${REDIS_HOST}", ${REDIS_PORT}))
      if not red then
        ngx.log(ngx.STDERR, "Failed to connect to redis, error -> ", err)
		    return ngx.exit(ngx.HTTP_NOT_FOUND)
      end
	  
      if string.len("${REDIS_PASSWORD}") > 0 then
        local res, err = red:auth("${REDIS_PASSWORD}")
        if not res then
          ngx.say("failed to authenticate, ", err)
          ngx.exit(ngx.HTTP_NOT_FOUND)
        end
      end

      assert(red:select(${REDIS_DATABASE}))
      if not red then
        ngx.log(ngx.STDERR, "Failed to select database, error -> ", err)
		    return ngx.exit(ngx.HTTP_NOT_FOUND)
      end

      local data = assert(red:setex(key, ${NGINX_REDIS_CACHE_TTL_DEFAULT} ,value))
      assert(red:set_keepalive(10000, 100))
      if data == ngx.null then
        return ngx.exit(ngx.HTTP_NOT_FOUND)
      end
    }

}

