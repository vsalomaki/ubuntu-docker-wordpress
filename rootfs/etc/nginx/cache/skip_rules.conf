##
# Add few rules which deny using cache
##

# Don't skip cache by default
set $skip_cache 0;

# insert project specific cache rules to this folder
include ${NGINX_INCLUDE_DIR}/skipcache/*.conf;

# POST requests and urls with a query string should always go to PHP
if ($request_method = POST) {
    set $skip_cache 1;
}

# Deal with non-accepted query vars
set $nonaccepted $query_string;

# Init the cache mode variable
set $cachemode "";

set_by_lua_block $accepted_cache_args {
    local mode = os.getenv( 'CACHE_MODE' )

    if mode == nil then
        mode = "whitelist"
    end

    -- Helper split string function
    local function split( inputstr, sep )
        if sep == nil then
            sep = "%s"
        end
        local t={}
        for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do
            table.insert(t, str)
        end
        return t
    end

    -- Helper escape special chars function
    local function esc( str )
        return str:gsub( "([^%w])", "%%%1" )
    end

    ngx.var.cachemode = mode

    if mode == "whitelist" then
        local with = {}
        local nonaccepted = ngx.var.nonaccepted or ""

        -- Get a list of accepted query vars from env variable
        local accepted = split( ( os.getenv( 'CACHE_QUERYVARS' ) or "" ), "," )

        -- Loop through the list
        for key, accept in pairs(accepted) do
        
            -- If there is a value present for the variable, store it in a variable
            if ngx.decode_args( nonaccepted )[ accept ] then
                local argtype = type( ngx.decode_args( nonaccepted )[ accept ] );
                if argtype == "number" or argtype == "string" then

                    table.insert( with, accept .. "=" .. ngx.decode_args( nonaccepted )[ accept ] )
                    -- Remove the accepted key-value pair from the string
                    nonaccepted = string.gsub( nonaccepted, "&?" .. esc( accept ) .. "=[^&]+", "" )

                elseif argtype == "boolean" then

                    table.insert( with, accept .. "=true" )
                    -- Remove the accepted key-value pair from the string
                    nonaccepted = string.gsub( nonaccepted, "&?" .. esc( accept ), "" )

                end
            end
        end

        -- Store all non-accepted query vars to checked later
        ngx.var.nonaccepted = nonaccepted

        -- Return accepted query var key-value pairs to be used in the cache key
        if next(with) ~= nil then
            return "?" .. table.concat( with, "&" )
        end

    else
        -- Get a list of blacklisted query vars from env variable
        local blacklist = split( ( os.getenv( 'CACHE_QUERYVARS' ) or "" ), "," )
        local queryvars = ngx.decode_args( ngx.var.query_string or "" )

        ngx.var.nonaccepted = ""

        for key, queryvar in pairs(blacklist) do
            if queryvars[ queryvar ] then
                ngx.var.skip_cache = 1
                return
            end
        end
    end
}

# If you need to debug the cache mode, uncomment the following line
# add_header X-cache-mode $cachemode;

# If there were any unaccepted query vars, skip cache
if ($nonaccepted != "") {
    set $skip_cache 1;
}

# Don't use the cache for logged in users or recent commenters
if ($http_cookie ~* ${NGINX_CACHE_SKIP_ON_COOKIES}) {
    set $skip_cache 1;
}

if ($sent_http_set_cookie) {
    set $skip_cache 1;
}

# Don't cache responses from wp-admin, xmlrpc and wp-login.php
if ($request_uri ~* ${NGINX_CACHE_SKIP_ON_URLS}) {
    set $skip_cache 1;
}


# Skip fetch and skip if conditions are met
srcache_fetch_skip $skip_cache;
srcache_store_skip $skip_cache;
